// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using blog_api.Data;

#nullable disable

namespace blog_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241212142129_AddPostsAndCommentsTable")]
    partial class AddPostsAndCommentsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("blog_api.Models.BlacklistedToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id");

                    b.ToTable("BlacklistedTokens");
                });

            modelBuilder.Entity("blog_api.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<int>("SubComments")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("blog_api.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<int>("CommentsCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("uuid");

                    b.Property<string>("CommunityName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<int>("ReadingTime")
                        .HasColumnType("integer");

                    b.Property<List<Guid>>("Tags")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("blog_api.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("104f3fa5-91e6-4ec8-a6df-e3feb4f91c15"),
                            CreateTime = new DateTime(2024, 12, 12, 14, 21, 29, 775, DateTimeKind.Utc).AddTicks(2169),
                            Name = "история"
                        },
                        new
                        {
                            Id = new Guid("28fdc22d-b086-48f3-b2b9-2f8ccd8b59d5"),
                            CreateTime = new DateTime(2024, 12, 12, 14, 21, 29, 775, DateTimeKind.Utc).AddTicks(2172),
                            Name = "еда"
                        },
                        new
                        {
                            Id = new Guid("2fe8d803-0e70-4495-9f02-e9f349f4916f"),
                            CreateTime = new DateTime(2024, 12, 12, 14, 21, 29, 775, DateTimeKind.Utc).AddTicks(2173),
                            Name = "18+"
                        },
                        new
                        {
                            Id = new Guid("e39cd64e-7fe8-4bae-9ffd-9868beeb8dd5"),
                            CreateTime = new DateTime(2024, 12, 12, 14, 21, 29, 775, DateTimeKind.Utc).AddTicks(2175),
                            Name = "приколы"
                        },
                        new
                        {
                            Id = new Guid("83dc1c3a-3a7a-4208-b365-d443016a90ff"),
                            CreateTime = new DateTime(2024, 12, 12, 14, 21, 29, 775, DateTimeKind.Utc).AddTicks(2176),
                            Name = "it"
                        },
                        new
                        {
                            Id = new Guid("ee2f915c-b7ce-4eb3-965a-87b4695fd790"),
                            CreateTime = new DateTime(2024, 12, 12, 14, 21, 29, 775, DateTimeKind.Utc).AddTicks(2186),
                            Name = "интернет"
                        },
                        new
                        {
                            Id = new Guid("bf45aa62-c243-44e5-8205-84c0b34a3534"),
                            CreateTime = new DateTime(2024, 12, 12, 14, 21, 29, 775, DateTimeKind.Utc).AddTicks(2187),
                            Name = "теория_заговора"
                        },
                        new
                        {
                            Id = new Guid("a448c084-3edd-4e6f-8094-b9d7e3b42ae2"),
                            CreateTime = new DateTime(2024, 12, 12, 14, 21, 29, 775, DateTimeKind.Utc).AddTicks(2188),
                            Name = "соцсети"
                        },
                        new
                        {
                            Id = new Guid("b67f0e4b-4c01-4c4e-80db-c279bb195aa0"),
                            CreateTime = new DateTime(2024, 12, 12, 14, 21, 29, 775, DateTimeKind.Utc).AddTicks(2190),
                            Name = "косплей"
                        },
                        new
                        {
                            Id = new Guid("cb712a1f-8f6b-4167-9c4b-7afcc9f0a3a7"),
                            CreateTime = new DateTime(2024, 12, 12, 14, 21, 29, 775, DateTimeKind.Utc).AddTicks(2191),
                            Name = "преступление"
                        });
                });

            modelBuilder.Entity("blog_api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("blog_api.Models.Comment", b =>
                {
                    b.HasOne("blog_api.Models.Comment", null)
                        .WithMany("SubCommentsList")
                        .HasForeignKey("CommentId");

                    b.HasOne("blog_api.Models.Post", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("blog_api.Models.Comment", b =>
                {
                    b.Navigation("SubCommentsList");
                });

            modelBuilder.Entity("blog_api.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
