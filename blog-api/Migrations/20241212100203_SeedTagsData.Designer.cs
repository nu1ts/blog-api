// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using blog_api.Data;

#nullable disable

namespace blog_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241212100203_SeedTagsData")]
    partial class SeedTagsData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("blog_api.Models.BlacklistedToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id");

                    b.ToTable("BlacklistedTokens");
                });

            modelBuilder.Entity("blog_api.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c44998c2-5e85-460c-9a9f-2664fa273bcf"),
                            CreateTime = new DateTime(2024, 12, 12, 10, 2, 3, 401, DateTimeKind.Utc).AddTicks(7631),
                            Name = "история"
                        },
                        new
                        {
                            Id = new Guid("e2c4cbaf-7741-4e48-9513-fcb67accd901"),
                            CreateTime = new DateTime(2024, 12, 12, 10, 2, 3, 401, DateTimeKind.Utc).AddTicks(7635),
                            Name = "еда"
                        },
                        new
                        {
                            Id = new Guid("9a0be9d0-2d82-492a-bb8c-7a526725365b"),
                            CreateTime = new DateTime(2024, 12, 12, 10, 2, 3, 401, DateTimeKind.Utc).AddTicks(7636),
                            Name = "18+"
                        },
                        new
                        {
                            Id = new Guid("2b8d96d9-2096-4f6a-934e-2ad3f363e1d8"),
                            CreateTime = new DateTime(2024, 12, 12, 10, 2, 3, 401, DateTimeKind.Utc).AddTicks(7637),
                            Name = "приколы"
                        },
                        new
                        {
                            Id = new Guid("1bd54b9b-aacb-4f88-bc37-898306a58109"),
                            CreateTime = new DateTime(2024, 12, 12, 10, 2, 3, 401, DateTimeKind.Utc).AddTicks(7638),
                            Name = "it"
                        },
                        new
                        {
                            Id = new Guid("1bf56b60-74ff-4306-99ef-630350cf0522"),
                            CreateTime = new DateTime(2024, 12, 12, 10, 2, 3, 401, DateTimeKind.Utc).AddTicks(7640),
                            Name = "интернет"
                        },
                        new
                        {
                            Id = new Guid("80cd7185-ee19-4fa9-9e4f-17097e849a98"),
                            CreateTime = new DateTime(2024, 12, 12, 10, 2, 3, 401, DateTimeKind.Utc).AddTicks(7651),
                            Name = "теория_заговора"
                        },
                        new
                        {
                            Id = new Guid("b4042001-5d95-40f7-8b67-79d551169044"),
                            CreateTime = new DateTime(2024, 12, 12, 10, 2, 3, 401, DateTimeKind.Utc).AddTicks(7652),
                            Name = "соцсети"
                        },
                        new
                        {
                            Id = new Guid("18dfd1a8-8211-4a8a-8914-3bf99a177dda"),
                            CreateTime = new DateTime(2024, 12, 12, 10, 2, 3, 401, DateTimeKind.Utc).AddTicks(7653),
                            Name = "косплей"
                        },
                        new
                        {
                            Id = new Guid("08223cb9-46a6-4c83-a1c5-058d843ffe35"),
                            CreateTime = new DateTime(2024, 12, 12, 10, 2, 3, 401, DateTimeKind.Utc).AddTicks(7654),
                            Name = "преступление"
                        });
                });

            modelBuilder.Entity("blog_api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
