// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using blog_api.Data;

#nullable disable

namespace blog_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241213082658_UpdateUserModel")]
    partial class UpdateUserModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("blog_api.Models.BlacklistedToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id");

                    b.ToTable("BlacklistedTokens");
                });

            modelBuilder.Entity("blog_api.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<int>("SubComments")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("blog_api.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<int>("CommentsCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("uuid");

                    b.Property<string>("CommunityName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<int>("ReadingTime")
                        .HasColumnType("integer");

                    b.Property<List<Guid>>("Tags")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("blog_api.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6cce1ee5-b116-4276-b0e9-cbf2a64b928b"),
                            CreateTime = new DateTime(2024, 12, 13, 8, 26, 58, 189, DateTimeKind.Utc).AddTicks(4832),
                            Name = "история"
                        },
                        new
                        {
                            Id = new Guid("2a5957e7-debc-4b4a-a027-786d0ea1594e"),
                            CreateTime = new DateTime(2024, 12, 13, 8, 26, 58, 189, DateTimeKind.Utc).AddTicks(4835),
                            Name = "еда"
                        },
                        new
                        {
                            Id = new Guid("c1c763bc-b752-4943-81cb-4a3e4d485745"),
                            CreateTime = new DateTime(2024, 12, 13, 8, 26, 58, 189, DateTimeKind.Utc).AddTicks(4836),
                            Name = "18+"
                        },
                        new
                        {
                            Id = new Guid("f66851c3-7c17-4ce0-9493-906ce404572f"),
                            CreateTime = new DateTime(2024, 12, 13, 8, 26, 58, 189, DateTimeKind.Utc).AddTicks(4837),
                            Name = "приколы"
                        },
                        new
                        {
                            Id = new Guid("bcd2c859-398a-4ce5-ba3e-156af3f5bb0e"),
                            CreateTime = new DateTime(2024, 12, 13, 8, 26, 58, 189, DateTimeKind.Utc).AddTicks(4839),
                            Name = "it"
                        },
                        new
                        {
                            Id = new Guid("a1175ed4-7923-40ac-a0a8-c1a0ec5631b4"),
                            CreateTime = new DateTime(2024, 12, 13, 8, 26, 58, 189, DateTimeKind.Utc).AddTicks(4840),
                            Name = "интернет"
                        },
                        new
                        {
                            Id = new Guid("e9e5a0b8-8684-4344-a72a-195f501aeeeb"),
                            CreateTime = new DateTime(2024, 12, 13, 8, 26, 58, 189, DateTimeKind.Utc).AddTicks(4841),
                            Name = "теория_заговора"
                        },
                        new
                        {
                            Id = new Guid("6980ec58-cd35-4ebf-8e50-16ba83de0efe"),
                            CreateTime = new DateTime(2024, 12, 13, 8, 26, 58, 189, DateTimeKind.Utc).AddTicks(4852),
                            Name = "соцсети"
                        },
                        new
                        {
                            Id = new Guid("17fd6c73-254a-44f9-8f56-4a622265f14a"),
                            CreateTime = new DateTime(2024, 12, 13, 8, 26, 58, 189, DateTimeKind.Utc).AddTicks(4854),
                            Name = "косплей"
                        },
                        new
                        {
                            Id = new Guid("1e5242c6-2ee8-491c-adab-9b3ebe8cbdda"),
                            CreateTime = new DateTime(2024, 12, 13, 8, 26, 58, 189, DateTimeKind.Utc).AddTicks(4855),
                            Name = "преступление"
                        });
                });

            modelBuilder.Entity("blog_api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<List<Guid>>("Likes")
                        .HasColumnType("uuid[]");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<List<Guid>>("Posts")
                        .HasColumnType("uuid[]");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("blog_api.Models.Comment", b =>
                {
                    b.HasOne("blog_api.Models.Comment", null)
                        .WithMany("SubCommentsList")
                        .HasForeignKey("CommentId");

                    b.HasOne("blog_api.Models.Post", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("blog_api.Models.Comment", b =>
                {
                    b.Navigation("SubCommentsList");
                });

            modelBuilder.Entity("blog_api.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
