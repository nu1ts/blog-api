// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using blog_api.Data;

#nullable disable

namespace blog_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("blog_api.Models.BlacklistedToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id");

                    b.ToTable("BlacklistedTokens");
                });

            modelBuilder.Entity("blog_api.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<int>("SubComments")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("blog_api.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("Comments")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<int>("CommentsCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("uuid");

                    b.Property<string>("CommunityName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<int>("ReadingTime")
                        .HasColumnType("integer");

                    b.Property<List<Guid>>("Tags")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("blog_api.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c91199e0-585c-4dc4-bd75-6e21e8e41f16"),
                            CreateTime = new DateTime(2024, 12, 13, 13, 41, 49, 671, DateTimeKind.Utc).AddTicks(9276),
                            Name = "история"
                        },
                        new
                        {
                            Id = new Guid("9b5353e8-abef-45f2-bfe3-72439cf0c887"),
                            CreateTime = new DateTime(2024, 12, 13, 13, 41, 49, 671, DateTimeKind.Utc).AddTicks(9279),
                            Name = "еда"
                        },
                        new
                        {
                            Id = new Guid("e375d91f-d9e2-4066-b31a-72e139d044bd"),
                            CreateTime = new DateTime(2024, 12, 13, 13, 41, 49, 671, DateTimeKind.Utc).AddTicks(9321),
                            Name = "18+"
                        },
                        new
                        {
                            Id = new Guid("ff81b283-2e81-4116-a161-6dd501517d14"),
                            CreateTime = new DateTime(2024, 12, 13, 13, 41, 49, 671, DateTimeKind.Utc).AddTicks(9322),
                            Name = "приколы"
                        },
                        new
                        {
                            Id = new Guid("d44ebbe4-2445-4004-87d6-c589f6e2bfbc"),
                            CreateTime = new DateTime(2024, 12, 13, 13, 41, 49, 671, DateTimeKind.Utc).AddTicks(9324),
                            Name = "it"
                        },
                        new
                        {
                            Id = new Guid("9d61168f-2e6a-4a38-ab4f-630d20aec741"),
                            CreateTime = new DateTime(2024, 12, 13, 13, 41, 49, 671, DateTimeKind.Utc).AddTicks(9325),
                            Name = "интернет"
                        },
                        new
                        {
                            Id = new Guid("05bf90b0-9573-44b0-8dc9-5d21e36e501c"),
                            CreateTime = new DateTime(2024, 12, 13, 13, 41, 49, 671, DateTimeKind.Utc).AddTicks(9326),
                            Name = "теория_заговора"
                        },
                        new
                        {
                            Id = new Guid("507d093c-2394-4c32-ae33-ecc545adc50d"),
                            CreateTime = new DateTime(2024, 12, 13, 13, 41, 49, 671, DateTimeKind.Utc).AddTicks(9327),
                            Name = "соцсети"
                        },
                        new
                        {
                            Id = new Guid("d73eee01-eac0-4e17-9dee-f69d2b1b1a45"),
                            CreateTime = new DateTime(2024, 12, 13, 13, 41, 49, 671, DateTimeKind.Utc).AddTicks(9328),
                            Name = "косплей"
                        },
                        new
                        {
                            Id = new Guid("e4def103-0fa5-4dc2-9ab2-5d1e929a250e"),
                            CreateTime = new DateTime(2024, 12, 13, 13, 41, 49, 671, DateTimeKind.Utc).AddTicks(9329),
                            Name = "преступление"
                        });
                });

            modelBuilder.Entity("blog_api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<List<Guid>>("Likes")
                        .HasColumnType("uuid[]");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<List<Guid>>("Posts")
                        .HasColumnType("uuid[]");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
